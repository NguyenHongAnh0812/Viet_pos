import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:excel/excel.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/product_service.dart';
import 'dart:io';

class ImportProgress {
  final int totalItems;
  final int processedItems;
  final int successCount;
  final int errorCount;
  final List<String> errors;
  final bool isPaused;
  final String currentStatus;

  ImportProgress({
    required this.totalItems,
    required this.processedItems,
    required this.successCount,
    required this.errorCount,
    required this.errors,
    required this.isPaused,
    required this.currentStatus,
  });
}

class InvoiceImportScreen extends StatefulWidget {
  const InvoiceImportScreen({super.key});

  @override
  State<InvoiceImportScreen> createState() => _InvoiceImportScreenState();
}

class _InvoiceImportScreenState extends State<InvoiceImportScreen> {
  String _status = 'Ch∆∞a ch·ªçn file n√†o';
  List<List<dynamic>> _excelData = [];
  List<List<dynamic>> _filteredData = [];
  List<List<dynamic>> _mergedData = [];
  bool _showFilteredData = false;
  bool _showMergedData = false;
  bool _isImporting = false;
  
  // Th√™m c√°c bi·∫øn m·ªõi
  double _progress = 0.0;
  int _currentPage = 0;
  int _pageSize = 100;
  List<String> _validationErrors = [];
  Map<String, int> _retryCount = {};
  int _maxRetries = 3;
  List<String> _importErrors = [];

  // Th√™m bi·∫øn m·ªõi ƒë·ªÉ l∆∞u th√¥ng tin b·ªô nh·ªõ
  String _memoryStatus = '';
  bool _hasEnoughMemory = true;

  bool _isPaused = false;
  int _lastProcessedIndex = 0;
  ImportProgress? _importProgress;

  bool _isLoading = false;
  bool _isLoadingFile = false;

  // H√†m validate d·ªØ li·ªáu
  List<String> validateRow(List<dynamic> row, int rowIndex) {
    List<String> errors = [];
    
    // Ki·ªÉm tra t√™n s·∫£n ph·∫©m
    if (row[0].toString().trim().isEmpty) {
      errors.add('D√≤ng ${rowIndex + 1}: T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }
    
    // Ki·ªÉm tra ƒë∆°n v·ªã t√≠nh
    if (row[1].toString().trim().isEmpty) {
      errors.add('D√≤ng ${rowIndex + 1}: ƒê∆°n v·ªã t√≠nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }
    
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng
    final quantity = double.tryParse(row[2].toString().replaceAll(',', ''));
    if (quantity == null || quantity <= 0) {
      errors.add('D√≤ng ${rowIndex + 1}: S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0');
    }
    
    return errors;
  }

  // H√†m ki·ªÉm tra b·ªô nh·ªõ
  Future<void> checkMemoryStatus() async {
    try {
      if (Platform.isAndroid) {
        // L·∫•y th√¥ng tin b·ªô nh·ªõ tr√™n Android
        final result = await Process.run('cat', ['/proc/meminfo']);
        final memInfo = result.stdout.toString();
        
        // Parse th√¥ng tin b·ªô nh·ªõ
        final totalMem = RegExp(r'MemTotal:\s+(\d+)').firstMatch(memInfo)?.group(1);
        final freeMem = RegExp(r'MemFree:\s+(\d+)').firstMatch(memInfo)?.group(1);
        final availableMem = RegExp(r'MemAvailable:\s+(\d+)').firstMatch(memInfo)?.group(1);
        
        if (totalMem != null && availableMem != null) {
          final total = int.parse(totalMem);
          final available = int.parse(availableMem);
          final usedPercentage = ((total - available) / total * 100).toStringAsFixed(1);
          
          setState(() {
            _memoryStatus = 'B·ªô nh·ªõ: ${(available / 1024 / 1024).toStringAsFixed(1)}GB kh·∫£ d·ª•ng / ${(total / 1024 / 1024).toStringAsFixed(1)}GB t·ªïng (${usedPercentage}% ƒë√£ s·ª≠ d·ª•ng)';
            _hasEnoughMemory = available > 500 * 1024 * 1024; // Y√™u c·∫ßu √≠t nh·∫•t 500MB free
          });
        }
      } else if (Platform.isIOS) {
        // L·∫•y th√¥ng tin b·ªô nh·ªõ tr√™n iOS
        final result = await Process.run('vm_stat', []);
        final vmStats = result.stdout.toString();
        
        // Parse th√¥ng tin b·ªô nh·ªõ
        final pageSize = 4096; // Default page size on iOS
        final freePages = RegExp(r'Pages free:\s+(\d+)').firstMatch(vmStats)?.group(1);
        final totalPages = RegExp(r'Pages active:\s+(\d+)').firstMatch(vmStats)?.group(1);
        
        if (freePages != null && totalPages != null) {
          final free = int.parse(freePages) * pageSize;
          final total = int.parse(totalPages) * pageSize;
          final usedPercentage = ((total - free) / total * 100).toStringAsFixed(1);
          
          setState(() {
            _memoryStatus = 'B·ªô nh·ªõ: ${(free / 1024 / 1024).toStringAsFixed(1)}GB kh·∫£ d·ª•ng / ${(total / 1024 / 1024).toStringAsFixed(1)}GB t·ªïng (${usedPercentage}% ƒë√£ s·ª≠ d·ª•ng)';
            _hasEnoughMemory = free > 500 * 1024 * 1024; // Y√™u c·∫ßu √≠t nh·∫•t 500MB free
          });
        }
      } else {
        // Cho c√°c platform kh√°c
        setState(() {
          _memoryStatus = 'Kh√¥ng th·ªÉ ki·ªÉm tra b·ªô nh·ªõ tr√™n platform n√†y';
          _hasEnoughMemory = true; // M·∫∑c ƒë·ªãnh cho ph√©p
        });
      }
    } catch (e) {
      print('Error checking memory: $e');
      setState(() {
        _memoryStatus = 'Kh√¥ng th·ªÉ ki·ªÉm tra b·ªô nh·ªõ: $e';
        _hasEnoughMemory = true; // M·∫∑c ƒë·ªãnh cho ph√©p
      });
    }
  }

  // H√†m ∆∞·ªõc t√≠nh b·ªô nh·ªõ c·∫ßn thi·∫øt cho file Excel
  Future<void> estimateExcelMemory(FilePickerResult result) async {
    if (result.files.first.bytes == null) return;
    
    final fileSize = result.files.first.bytes!.length;
    // ∆Ø·ªõc t√≠nh b·ªô nh·ªõ c·∫ßn thi·∫øt (th∆∞·ªùng g·∫•p 2-3 l·∫ßn k√≠ch th∆∞·ªõc file)
    final estimatedMemory = fileSize * 3;
    
    setState(() {
      _memoryStatus += '\nK√≠ch th∆∞·ªõc file: ${(fileSize / 1024 / 1024).toStringAsFixed(2)}MB';
      _memoryStatus += '\nB·ªô nh·ªõ ∆∞·ªõc t√≠nh c·∫ßn: ${(estimatedMemory / 1024 / 1024).toStringAsFixed(2)}MB';
    });
  }

  // H√†m ∆∞·ªõc t√≠nh b·ªô nh·ªõ c·∫ßn thi·∫øt cho danh s√°ch s·∫£n ph·∫©m
  Future<void> estimateProductsMemory() async {
    try {
      final snapshot = await FirebaseFirestore.instance.collection('products').count().get();
      final productCount = snapshot.count ?? 0;
      
      // ∆Ø·ªõc t√≠nh m·ªói s·∫£n ph·∫©m c·∫ßn kho·∫£ng 1KB b·ªô nh·ªõ
      final estimatedMemory = productCount * 1024;
      
      setState(() {
        _memoryStatus += '\nS·ªë l∆∞·ª£ng s·∫£n ph·∫©m: $productCount';
        _memoryStatus += '\nB·ªô nh·ªõ ∆∞·ªõc t√≠nh cho s·∫£n ph·∫©m: ${(estimatedMemory / 1024 / 1024).toStringAsFixed(2)}MB';
      });
    } catch (e) {
      print('Error estimating products memory: $e');
    }
  }

  @override
  void initState() {
    super.initState();
    checkMemoryStatus();
  }

  // H√†m ƒë·ªçc file Excel v·ªõi pagination
  Future<void> readExcelFile() async {
    try {
      setState(() {
        _status = 'ƒêang ƒë·ªçc file Excel...';
        _isLoading = true;
        _isLoadingFile = true;
        _excelData = [];
        _filteredData = [];
        _mergedData = [];
      });

      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['xlsx', 'xls'],
      );

      if (result == null) return;

      final bytes = result.files.first.bytes!;
      final excel = Excel.decodeBytes(bytes);
      final sheet = excel.tables[excel.tables.keys.first];
      
      if (sheet == null) {
        throw Exception('Kh√¥ng t√¨m th·∫•y sheet trong file Excel');
      }

      print('T·ªïng s·ªë d√≤ng trong file: ${sheet.rows.length}');

      // L·∫•y header v√† t√¨m v·ªã tr√≠ c√°c c·ªôt c·∫ßn thi·∫øt
      final headers = sheet.rows.first.map((cell) => cell?.value?.toString().trim().toLowerCase() ?? '').toList();
      print('Headers: $headers');

      final productIndex = headers.indexWhere((h) => h.contains('product'));
      final unitIndex = headers.indexWhere((h) => h.contains('ƒë∆°n v·ªã t√≠nh'));
      final quantityIndex = headers.indexWhere((h) => h.contains('s·ªë l∆∞·ª£ng'));
      final toImportIndex = headers.indexWhere((h) => h.contains('to import'));
      final unitPriceIndex = headers.indexWhere((h) => h.contains('ƒë∆°n gi√°'));
      print('ƒê∆°n gi√°: $unitPriceIndex');

      print('V·ªã tr√≠ c√°c c·ªôt:');
      print('Product: $productIndex');
      print('ƒê∆°n v·ªã t√≠nh: $unitIndex');
      print('S·ªë l∆∞·ª£ng: $quantityIndex');
      print('To import: $toImportIndex');

      if (productIndex == -1 || unitIndex == -1 || quantityIndex == -1 || toImportIndex == -1) {
        throw Exception('Kh√¥ng t√¨m th·∫•y m·ªôt ho·∫∑c nhi·ªÅu c·ªôt c·∫ßn thi·∫øt (Product, ƒê∆°n v·ªã t√≠nh, S·ªë l∆∞·ª£ng, To import)');
      }

      // ƒê·ªçc d·ªØ li·ªáu v√† l·ªçc theo To import = true
      final Map<String, List<dynamic>> mergedProducts = {};
      final Map<String, double> mergedTotalAmount = {};
      int rowCount = 0;
      int skippedRows = 0;
      int invalidToImport = 0;
      int emptyNameOrUnit = 0;
      int invalidQuantity = 0;

      // ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói s·∫£n ph·∫©m
      final Map<String, int> productAppearCount = {};
      for (var row in sheet.rows.skip(1)) {
        if (row.length <= toImportIndex) {
          print('D√≤ng [1m${rowCount + 1}[0m: Kh√¥ng ƒë·ªß c·ªôt (${row.length} < $toImportIndex)');
          skippedRows++;
          continue;
        }

        final toImport = row[toImportIndex]?.value?.toString().trim().toLowerCase() ?? '';
        if (toImport != 'true') {
          invalidToImport++;
          continue;
        }

        final name = row[productIndex]?.value?.toString().trim() ?? '';
        // B·ªè qua n·∫øu t√™n s·∫£n ph·∫©m r·ªóng ho·∫∑c b·∫±ng '0'
        if (name.isEmpty || name == '0') {
          print('D√≤ng [1m${rowCount + 1}[0m: T√™n s·∫£n ph·∫©m tr·ªëng ho·∫∑c b·∫±ng 0 (name="$name")');
          emptyNameOrUnit++;
          continue;
        }
        final unit = row[unitIndex]?.value?.toString().trim() ?? '';
        final quantityStr = row[quantityIndex]?.value?.toString().replaceAll(',', '') ?? '';
        final quantity = double.tryParse(quantityStr) ?? 0;

        if (name.isEmpty) {
          print('D√≤ng ${rowCount + 1}: T√™n s·∫£n ph·∫©m tr·ªëng');
          emptyNameOrUnit++;
          continue;
        }

        // Lo·∫°i b·ªè text trong d·∫•u ngo·∫∑c ƒë∆°n
        final cleanName = name.replaceAll(RegExp(r'\([^)]*\)'), '').trim();

        // N·∫øu ƒë∆°n v·ªã t√≠nh tr·ªëng th√¨ ƒë·ªÉ '', s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá th√¨ ƒë·ªÉ 0
        final unitPriceStr = unitPriceIndex != -1 && row.length > unitPriceIndex ? row[unitPriceIndex]?.value?.toString().replaceAll(',', '') ?? '' : '';
        final unitPrice = double.tryParse(unitPriceStr) ?? 0;

        if (!mergedProducts.containsKey(cleanName)) {
          mergedProducts[cleanName] = [cleanName, unit, quantity];
          mergedTotalAmount[cleanName] = unitPrice * quantity;
        } else {
          mergedProducts[cleanName]![2] = (mergedProducts[cleanName]![2] as double) + quantity;
          mergedTotalAmount[cleanName] = (mergedTotalAmount[cleanName] ?? 0) + unitPrice * quantity;
        }
        rowCount++;

        if (cleanName.isNotEmpty && cleanName != '0') {
          productAppearCount[cleanName] = (productAppearCount[cleanName] ?? 0) + 1;
        }
      }

      print('\nTh·ªëng k√™ ƒë·ªçc file:');
      print('T·ªïng s·ªë d√≤ng: [1m${sheet.rows.length}[0m');
      print('S·ªë d√≤ng b·ªè qua (kh√¥ng ƒë·ªß c·ªôt): $skippedRows');
      print('S·ªë d√≤ng kh√¥ng c√≥ To import = true: $invalidToImport');
      print('S·ªë d√≤ng t√™n/ƒë∆°n v·ªã t√≠nh tr·ªëng: $emptyNameOrUnit');
      print('S·ªë d√≤ng s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá: $invalidQuantity');
      print('S·ªë d√≤ng h·ª£p l·ªá: $rowCount');
      print('S·ªë s·∫£n ph·∫©m sau khi g·ªôp: ${mergedProducts.length}');

      if (mergedProducts.isEmpty) {
        throw Exception('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá trong file Excel');
      }

      // Khi t·∫°o _mergedData, n·∫øu s·∫£n ph·∫©m ch·ªâ c√≥ 1 d√≤ng th√¨ ƒë∆°n gi√° gi·ªØ nguy√™n, n·∫øu nhi·ªÅu d√≤ng th√¨ t√≠nh trung b√¨nh gia quy·ªÅn
      _mergedData = mergedProducts.values.map((row) {
        final name = row[0].toString();
        final totalQuantity = (row[2] as double);
        final totalAmount = mergedTotalAmount[name] ?? 0;
        final count = productAppearCount[name] ?? 1;
        double avgCostPrice;
        if (count == 1) {
          avgCostPrice = totalQuantity > 0 ? (totalAmount / totalQuantity) : 0;
        } else {
          avgCostPrice = totalQuantity > 0 ? (totalAmount / totalQuantity) : 0;
        }
        return [row[0], row[1], row[2], avgCostPrice];
      }).toList();

      setState(() {
        _mergedData = _mergedData;
        _status = 'ƒê√£ l·ªçc v√† g·ªôp ${_mergedData.length} s·∫£n ph·∫©m t·ª´ $rowCount d√≤ng h·ª£p l·ªá (T·ªïng: ${sheet.rows.length} d√≤ng)';
        _isLoading = false;
        _isLoadingFile = false;
      });

    } catch (e) {
      print('L·ªói khi ƒë·ªçc file: $e');
      setState(() {
        _status = 'L·ªói khi ƒë·ªçc file: $e';
        _isLoading = false;
        _isLoadingFile = false;
      });
    } finally {
      setState(() {
        _isLoading = false;
        _isLoadingFile = false;
      });
    }
  }

  Future<void> filterData() async {
    if (_excelData.isEmpty) {
      setState(() => _status = 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l·ªçc');
      return;
    }

    setState(() {
      _status = 'ƒêang l·ªçc d·ªØ li·ªáu...';
      _mergedData = [];
    });

    try {
      // T·∫°o map ƒë·ªÉ g·ªôp c√°c s·∫£n ph·∫©m tr√πng t√™n
      final Map<String, List<dynamic>> mergedProducts = {};

      // L·ªçc v√† g·ªôp d·ªØ li·ªáu
      for (var row in _excelData) {
        if (row.length < 3) continue;

        final name = row[0].toString().trim();
        final unit = row[1].toString().trim();
        final quantity = double.tryParse(row[2].toString().replaceAll(',', '')) ?? 0;

        if (name.isEmpty || unit.isEmpty) continue;

        if (!mergedProducts.containsKey(name)) {
          mergedProducts[name] = [name, unit, quantity];
        } else {
          // C·ªông d·ªìn s·ªë l∆∞·ª£ng cho s·∫£n ph·∫©m tr√πng t√™n
          mergedProducts[name]![2] = (mergedProducts[name]![2] as double) + quantity;
        }
      }

      // Chuy·ªÉn map th√†nh list
      _mergedData = mergedProducts.values.toList();

      setState(() {
        _status = 'ƒê√£ l·ªçc v√† g·ªôp ${_mergedData.length} s·∫£n ph·∫©m';
      });
    } catch (e) {
      setState(() {
        _status = 'L·ªói khi l·ªçc d·ªØ li·ªáu: $e';
      });
    }
  }

  // H√†m load s·∫£n ph·∫©m theo batch
  Future<Map<String, DocumentSnapshot>> loadProductsInBatches() async {
    final productsRef = FirebaseFirestore.instance.collection('products');
    final Map<String, DocumentSnapshot> allProducts = {};
    
    setState(() {
      _status = 'ƒêang t·∫£i danh s√°ch s·∫£n ph·∫©m...';
    });

    try {
      // ƒê·ªçc to√†n b·ªô s·∫£n ph·∫©m m·ªôt l·∫ßn
      final batch = await productsRef.get();
      
      for (var doc in batch.docs) {
        allProducts[doc['commonName'] as String] = doc;
      }
      
      setState(() {
        _status = 'ƒê√£ t·∫£i ${allProducts.length} s·∫£n ph·∫©m';
      });
    } catch (e) {
      print('Error loading products: $e');
      setState(() {
        _status = 'L·ªói khi t·∫£i s·∫£n ph·∫©m: $e';
      });
    }
    
    return allProducts;
  }

  // H√†m commit batch v·ªõi retry
  Future<bool> commitBatchWithRetry(WriteBatch batch, {int maxRetries = 3}) async {
    for (int i = 0; i < maxRetries; i++) {
      try {
        await batch.commit();
        return true;
      } catch (e) {
        if (i == maxRetries - 1) rethrow;
        await Future.delayed(Duration(seconds: i + 1));
      }
    }
    return false;
  }

  void pauseImport() {
    setState(() {
      _isPaused = true;
      _status = 'ƒê√£ t·∫°m d·ª´ng import. Nh·∫•n Ti·∫øp t·ª•c ƒë·ªÉ ti·∫øp t·ª•c.';
    });
  }

  void resumeImport() {
    setState(() {
      _isPaused = false;
      _status = 'ƒêang ti·∫øp t·ª•c import...';
    });
  }

  Future<void> importToFirebase() async {
    if (_mergedData.isEmpty) {
      setState(() => _status = 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ import');
      return;
    }

    setState(() {
      _isImporting = true;
      _status = 'ƒêang import d·ªØ li·ªáu...';
      _progress = 0.0;
      _importErrors = [];
    });

    try {
      final allProducts = await loadProductsInBatches();
      int updatedCount = 0;
      int newCount = 0;
      int errorCount = 0;
      final totalItems = _mergedData.length;
      // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói batch l√™n 2000 cho web
      const int batchLimit = 2000;

      for (int batchStart = 0; batchStart < _mergedData.length; batchStart += batchLimit) {
        if (_isPaused) {
          setState(() => _status = 'ƒê√£ t·∫°m d·ª´ng import. Nh·∫•n Ti·∫øp t·ª•c ƒë·ªÉ ti·∫øp t·ª•c.');
          return;
        }

        final batch = FirebaseFirestore.instance.batch();
        final batchEnd = (batchStart + batchLimit < _mergedData.length) ? batchStart + batchLimit : _mergedData.length;
        int batchOperations = 0;

        for (int i = batchStart; i < batchEnd; i++) {
          final row = _mergedData[i];
          final name = row[0].toString();
          final unit = row[1].toString();
          final quantity = double.tryParse(row[2].toString()) ?? 0;
          final costPrice = double.tryParse(row[3].toString()) ?? 0;

          try {
            if (allProducts.containsKey(name)) {
              final doc = allProducts[name]!;
              final currentStock = (doc['stock'] ?? 0).toDouble();
              batch.update(doc.reference, {
                'stock': currentStock + quantity,
                'updatedAt': FieldValue.serverTimestamp(),
              });
              updatedCount++;
            } else {
              final productData = {
                'name': name,
                'commonName': name,
                'unit': unit,
                'stock': quantity,
                'createdAt': FieldValue.serverTimestamp(),
                'updatedAt': FieldValue.serverTimestamp(),
                'category': 'Kh√°c',
                'description': '',
                'usage': '',
                'ingredients': '',
                'notes': '',
                'salePrice': 0,
                'isActive': true,
                'tags': [],
                'cost_price': costPrice,
              };
              final docRef = FirebaseFirestore.instance.collection('products').doc();
              batch.set(docRef, productData);
              newCount++;
            }
            batchOperations++;
          } catch (e) {
            errorCount++;
            _importErrors.add('L·ªói ·ªü d√≤ng ${i + 1}: $e');
          }

          setState(() {
            _progress = (i + 1) / totalItems;
            _status = 'ƒêang import... ${((i + 1) / totalItems * 100).toStringAsFixed(1)}%';
          });
        }

        if (batchOperations > 0) {
          try {
            await commitBatchWithRetry(batch);
            // Gi·∫£m delay xu·ªëng 100ms cho web
            await Future.delayed(const Duration(milliseconds: 100));
          } catch (e) {
            errorCount += batchOperations;
            _importErrors.add('L·ªói khi commit batch: $e');
          }
        }
      }

      setState(() {
        _isImporting = false;
        _status = 'Import ho√†n t·∫•t. ƒê√£ c·∫≠p nh·∫≠t $updatedCount s·∫£n ph·∫©m, th√™m m·ªõi $newCount s·∫£n ph·∫©m, $errorCount l·ªói.';
      });
    } catch (e) {
      setState(() {
        _isImporting = false;
        _status = 'L·ªói khi import: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // T·∫°o danh s√°ch t√™n s·∫£n ph·∫©m b·ªã gh√©p
    final Set<String> mergedNames = {};
    final Map<String, int> nameCount = {};
    for (var row in _mergedData) {
      final name = row[0].toString();
      nameCount[name] = (nameCount[name] ?? 0) + 1;
    }
    nameCount.forEach((name, count) {
      if (count > 1) mergedNames.add(name);
    });

    return Scaffold(
      appBar: AppBar(
        title: const Text('Import data'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // B∆∞·ªõc 1: Ch·ªçn file
            Card(
              color: Colors.blue[50],
              margin: const EdgeInsets.symmetric(vertical: 8),
              child: ListTile(
                leading: const Icon(Icons.upload_file, color: Colors.blue, size: 32),
                title: const Text('B∆∞·ªõc 1: Ch·ªçn file Excel', style: TextStyle(fontWeight: FontWeight.bold)),
                subtitle: const Text('Ch·ªçn file Excel (.xlsx) ch·ª©a danh s√°ch s·∫£n ph·∫©m c·∫ßn import.'),
                trailing: ElevatedButton.icon(
                  icon: const Icon(Icons.file_open),
                  label: const Text('Ch·ªçn file'),
                  onPressed: _isLoadingFile ? null : readExcelFile,
                ),
              ),
            ),
            // B∆∞·ªõc 2: Xem tr∆∞·ªõc d·ªØ li·ªáu
            if (_mergedData.isNotEmpty && !_isImporting) ...[
              Card(
                color: Colors.green[50],
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: ListTile(
                  leading: const Icon(Icons.preview, color: Colors.green, size: 32),
                  title: const Text('B∆∞·ªõc 2: Xem tr∆∞·ªõc d·ªØ li·ªáu', style: TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Text('T·ªïng s·ªë s·∫£n ph·∫©m: ${_mergedData.length}'),
                ),
              ),
              const SizedBox(height: 16),
              Card(
                child: SizedBox(
                  height: 200,
                  child: LayoutBuilder(
                    builder: (context, constraints) {
                      final tableWidth = constraints.maxWidth;
                      final colCount = 5;
                      final colWidth = tableWidth / colCount;
                      return SingleChildScrollView(
                        scrollDirection: Axis.vertical,
                        child: DataTable(
                          columnSpacing: 0,
                          columns: [
                            DataColumn(label: SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text('T√™n s·∫£n ph·∫©m')))),
                            DataColumn(label: SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text('ƒê∆°n v·ªã t√≠nh')))),
                            DataColumn(label: SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text('S·ªë l∆∞·ª£ng')))),
                            DataColumn(label: SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text('ƒê∆°n gi√° nh·∫≠p')))),
                            DataColumn(label: SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text('Tr·∫°ng th√°i')))),
                          ],
                          rows: _mergedData.map((row) {
                            final isMerged = mergedNames.contains(row[0].toString());
                            return DataRow(
                              color: isMerged ? MaterialStateProperty.all(Colors.yellow[100]) : null,
                              cells: [
                                DataCell(SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text(row[0].toString())))),
                                DataCell(SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text(row[1].toString())))),
                                DataCell(SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text(row[2].toString())))),
                                DataCell(SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Text(row.length > 3 ? row[3].toStringAsFixed(0) : '0')))),
                                DataCell(SizedBox(width: colWidth, child: Align(alignment: Alignment.centerLeft, child: Row(
                                  children: [
                                    if (isMerged) ...[
                                      const Icon(Icons.warning, color: Colors.orange, size: 18),
                                      const SizedBox(width: 4),
                                      const Text('ƒê√£ gh√©p', style: TextStyle(color: Colors.orange)),
                                    ] else ...[
                                      const Text('M·ªõi', style: TextStyle(color: Colors.green)),
                                    ]
                                  ],
                                )))),
                              ],
                            );
                          }).toList(),
                        ),
                      );
                    },
                  ),
                ),
              ),
            ],
            // B∆∞·ªõc 3: Import v√†o DB
            if (_mergedData.isNotEmpty) ...[
              Card(
                color: Colors.orange[50],
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: ListTile(
                  leading: const Icon(Icons.cloud_upload, color: Colors.orange, size: 32),
                  title: const Text('B∆∞·ªõc 3: Import v√†o h·ªá th·ªëng', style: TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: const Text('Nh·∫•n n√∫t "Import v√†o DB" ƒë·ªÉ b·∫Øt ƒë·∫ßu import d·ªØ li·ªáu.'),
                  trailing: ElevatedButton.icon(
                    icon: const Icon(Icons.cloud_upload),
                    label: const Text('Import v√†o DB'),
                    onPressed: _isImporting ? null : importToFirebase,
                  ),
                ),
              ),
            ],
            // Hi·ªÉn th·ªã ti·∫øn tr√¨nh import n·∫øu ƒëang import
            if (_isImporting) ...[
              const SizedBox(height: 16),
              LinearProgressIndicator(value: _progress),
              const SizedBox(height: 8),
              Text('ƒêang import: ${(_progress * 100).toStringAsFixed(1)}%', style: TextStyle(color: Colors.orange)),
            ],
            Text(_status),
            if (_isImporting || _isLoading)
              LinearProgressIndicator(value: _progress),
            const SizedBox(height: 16),
            Row(
              children: [
                if (_excelData.isNotEmpty)
                  ElevatedButton.icon(
                    onPressed: filterData,
                    icon: const Icon(Icons.filter_list),
                    label: const Text('T·∫°o s·∫£n ph·∫©m t·ª´ b·ªô l·ªçc'),
                  ),
                const SizedBox(width: 16),
                if (_importErrors.isNotEmpty) ...[
                  const SizedBox(height: 16),
                  const Text(
                    'Danh s√°ch l·ªói:',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.red,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Expanded(
                    child: ListView.builder(
                      itemCount: _importErrors.length,
                      itemBuilder: (context, index) {
                        return ListTile(
                          leading: const Icon(Icons.error, color: Colors.red),
                          title: Text(_importErrors[index]),
                        );
                      },
                    ),
                  ),
                ],
              ],
            ),
            if (_isLoadingFile) ...[
              const SizedBox(height: 32),
              Center(child: Text('ƒêang x·ª≠ l√Ω file Excel, vui l√≤ng ch·ªù...', style: TextStyle(fontSize: 16, color: Colors.blue))),
            ],
          ],
        ),
      ),
    );
  }
} 